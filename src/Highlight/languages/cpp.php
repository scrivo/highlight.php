<?php

function cpp($hljs)
{
    $regex = $hljs->regex;
    $C_LINE_COMMENT_MODE = $hljs->COMMENT('//', '$', (object) array('contains' => array((object) array('begin' => new Highlight\RegEx('/\\\\\\\\\\\\n/')))));
    $DECLTYPE_AUTO_RE = 'decltype\\(auto\\)';
    $NAMESPACE_RE = '[a-zA-Z_]\\w*::';
    $TEMPLATE_ARGUMENT_RE = '<[^<>]+>';
    $FUNCTION_TYPE_RE = '(?!struct)(' + $DECLTYPE_AUTO_RE + '|' + $regex->optional($NAMESPACE_RE) + '[a-zA-Z_]\\w*' + $regex->optional($TEMPLATE_ARGUMENT_RE) + ')';
    $CPP_PRIMITIVE_TYPES = (object) array('className' => 'type', 'begin' => '\\b[a-z\\d_]*_t\\b');
    $CHARACTER_ESCAPES = '\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)';
    $STRINGS = (object) array('className' => 'string', 'variants' => array((object) array('begin' => '(u8?|U|L)?"', 'end' => '"', 'illegal' => '\\n', 'contains' => array($hljs->BACKSLASH_ESCAPE)), (object) array('begin' => '(u8?|U|L)?\'(' + $CHARACTER_ESCAPES + '|.)', 'end' => '\'', 'illegal' => '.'), $hljs->END_SAME_AS_BEGIN((object) array('begin' => new Highlight\RegEx('/\\(\\?\\:u8\\?\\|U\\|L\\)\\?R"\\(\\[\\^\\(\\)\\\\\\\\ \\]\\{0,16\\}\\)\\\\\\(/'), 'end' => new Highlight\RegEx('/\\\\\\)\\(\\[\\^\\(\\)\\\\\\\\ \\]\\{0,16\\}\\)"/')))));
    $NUMBERS = (object) array('className' => 'number', 'variants' => array((object) array('begin' => '\\b(0b[01\']+)'), (object) array('begin' => '(-?)\\b([\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)'), (object) array('begin' => '(-?)(\\b0[xX][a-fA-F0-9\']+|(\\b[\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)([eE][-+]?[\\d\']+)?)')), 'relevance' => 0);
    $PREPROCESSOR = (object) array('className' => 'meta', 'begin' => new Highlight\RegEx('/\\#\\\\s\\*\\[a\\-z\\]\\+\\\\b/'), 'end' => new Highlight\RegEx('/\\$/'), 'keywords' => (object) array('keyword' => 'if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include'), 'contains' => array((object) array('begin' => new Highlight\RegEx('/\\\\\\\\\\\\n/'), 'relevance' => 0), $hljs->inherit($STRINGS, (object) array('className' => 'string')), (object) array('className' => 'string', 'begin' => new Highlight\RegEx('/\\<\\.\\*\\?\\>/')), $C_LINE_COMMENT_MODE, $hljs->C_BLOCK_COMMENT_MODE));
    $TITLE_MODE = (object) array('className' => 'title', 'begin' => $regex->optional($NAMESPACE_RE) + $hljs->IDENT_RE, 'relevance' => 0);
    $FUNCTION_TITLE = $regex->optional($NAMESPACE_RE) + $hljs->IDENT_RE + '\\s*\\(';
    $RESERVED_KEYWORDS = array('alignas', 'alignof', 'and', 'and_eq', 'asm', 'atomic_cancel', 'atomic_commit', 'atomic_noexcept', 'auto', 'bitand', 'bitor', 'break', 'case', 'catch', 'class', 'co_await', 'co_return', 'co_yield', 'compl', 'concept', 'const_cast|10', 'consteval', 'constexpr', 'constinit', 'continue', 'decltype', 'default', 'delete', 'do', 'dynamic_cast|10', 'else', 'enum', 'explicit', 'export', 'extern', 'false', 'final', 'for', 'friend', 'goto', 'if', 'import', 'inline', 'module', 'mutable', 'namespace', 'new', 'noexcept', 'not', 'not_eq', 'nullptr', 'operator', 'or', 'or_eq', 'override', 'private', 'protected', 'public', 'reflexpr', 'register', 'reinterpret_cast|10', 'requires', 'return', 'sizeof', 'static_assert', 'static_cast|10', 'struct', 'switch', 'synchronized', 'template', 'this', 'thread_local', 'throw', 'transaction_safe', 'transaction_safe_dynamic', 'true', 'try', 'typedef', 'typeid', 'typename', 'union', 'using', 'virtual', 'volatile', 'while', 'xor', 'xor_eq');
    $RESERVED_TYPES = array('bool', 'char', 'char16_t', 'char32_t', 'char8_t', 'double', 'float', 'int', 'long', 'short', 'void', 'wchar_t', 'unsigned', 'signed', 'const', 'static');
    $TYPE_HINTS = array('any', 'auto_ptr', 'barrier', 'binary_semaphore', 'bitset', 'complex', 'condition_variable', 'condition_variable_any', 'counting_semaphore', 'deque', 'false_type', 'future', 'imaginary', 'initializer_list', 'istringstream', 'jthread', 'latch', 'lock_guard', 'multimap', 'multiset', 'mutex', 'optional', 'ostringstream', 'packaged_task', 'pair', 'promise', 'priority_queue', 'queue', 'recursive_mutex', 'recursive_timed_mutex', 'scoped_lock', 'set', 'shared_future', 'shared_lock', 'shared_mutex', 'shared_timed_mutex', 'shared_ptr', 'stack', 'string_view', 'stringstream', 'timed_mutex', 'thread', 'true_type', 'tuple', 'unique_lock', 'unique_ptr', 'unordered_map', 'unordered_multimap', 'unordered_multiset', 'unordered_set', 'variant', 'vector', 'weak_ptr', 'wstring', 'wstring_view');
    $FUNCTION_HINTS = array('abort', 'abs', 'acos', 'apply', 'as_const', 'asin', 'atan', 'atan2', 'calloc', 'ceil', 'cerr', 'cin', 'clog', 'cos', 'cosh', 'cout', 'declval', 'endl', 'exchange', 'exit', 'exp', 'fabs', 'floor', 'fmod', 'forward', 'fprintf', 'fputs', 'free', 'frexp', 'fscanf', 'future', 'invoke', 'isalnum', 'isalpha', 'iscntrl', 'isdigit', 'isgraph', 'islower', 'isprint', 'ispunct', 'isspace', 'isupper', 'isxdigit', 'labs', 'launder', 'ldexp', 'log', 'log10', 'make_pair', 'make_shared', 'make_shared_for_overwrite', 'make_tuple', 'make_unique', 'malloc', 'memchr', 'memcmp', 'memcpy', 'memset', 'modf', 'move', 'pow', 'printf', 'putchar', 'puts', 'realloc', 'scanf', 'sin', 'sinh', 'snprintf', 'sprintf', 'sqrt', 'sscanf', 'std', 'stderr', 'stdin', 'stdout', 'strcat', 'strchr', 'strcmp', 'strcpy', 'strcspn', 'strlen', 'strncat', 'strncmp', 'strncpy', 'strpbrk', 'strrchr', 'strspn', 'strstr', 'swap', 'tan', 'tanh', 'terminate', 'to_underlying', 'tolower', 'toupper', 'vfprintf', 'visit', 'vprintf', 'vsprintf');
    $LITERALS = array('NULL', 'false', 'nullopt', 'nullptr', 'true');
    $BUILT_IN = array('_Pragma');
    $CPP_KEYWORDS = (object) array('type' => $RESERVED_TYPES, 'keyword' => $RESERVED_KEYWORDS, 'literal' => $LITERALS, 'built_in' => $BUILT_IN, '_type_hints' => $TYPE_HINTS);
    $FUNCTION_DISPATCH = (object) array('className' => 'function.dispatch', 'relevance' => 0, 'keywords' => (object) array('_hint' => $FUNCTION_HINTS), 'begin' => $regex->concat(new Highlight\RegEx('/\\\\b/'), new Highlight\RegEx('/\\(\\?\\!decltype\\)/'), new Highlight\RegEx('/\\(\\?\\!if\\)/'), new Highlight\RegEx('/\\(\\?\\!for\\)/'), new Highlight\RegEx('/\\(\\?\\!switch\\)/'), new Highlight\RegEx('/\\(\\?\\!while\\)/'), $hljs->IDENT_RE, $regex->lookahead(new Highlight\RegEx('/\\(\\<\\[\\^\\<\\>\\]\\+\\>\\|\\)\\\\s\\*\\\\\\(/'))));
    $EXPRESSION_CONTAINS = array($FUNCTION_DISPATCH, $PREPROCESSOR, $CPP_PRIMITIVE_TYPES, $C_LINE_COMMENT_MODE, $hljs->C_BLOCK_COMMENT_MODE, $NUMBERS, $STRINGS);
    $EXPRESSION_CONTEXT = (object) array('variants' => array((object) array('begin' => new Highlight\RegEx('/\\=/'), 'end' => new Highlight\RegEx('/;/')), (object) array('begin' => new Highlight\RegEx('/\\\\\\(/'), 'end' => new Highlight\RegEx('/\\\\\\)/')), (object) array('beginKeywords' => 'new throw return else', 'end' => new Highlight\RegEx('/;/'))), 'keywords' => $CPP_KEYWORDS, 'contains' => $EXPRESSION_CONTAINS->concat(array((object) array('begin' => new Highlight\RegEx('/\\\\\\(/'), 'end' => new Highlight\RegEx('/\\\\\\)/'), 'keywords' => $CPP_KEYWORDS, 'contains' => $EXPRESSION_CONTAINS->concat(array('self')), 'relevance' => 0))), 'relevance' => 0);
    $FUNCTION_DECLARATION = (object) array('className' => 'function', 'begin' => '(' + $FUNCTION_TYPE_RE + '[\\*&\\s]+)+' + $FUNCTION_TITLE, 'returnBegin' => true, 'end' => new Highlight\RegEx('/\\[\\{;\\=\\]/'), 'excludeEnd' => true, 'keywords' => $CPP_KEYWORDS, 'illegal' => new Highlight\RegEx('/\\[\\^\\\\w\\\\s\\\\\\*&\\:\\<\\>\\.\\]/'), 'contains' => array((object) array('begin' => $DECLTYPE_AUTO_RE, 'keywords' => $CPP_KEYWORDS, 'relevance' => 0), (object) array('begin' => $FUNCTION_TITLE, 'returnBegin' => true, 'contains' => array($TITLE_MODE), 'relevance' => 0), (object) array('begin' => new Highlight\RegEx('/\\:\\:/'), 'relevance' => 0), (object) array('begin' => new Highlight\RegEx('/\\:/'), 'endsWithParent' => true, 'contains' => array($STRINGS, $NUMBERS)), (object) array('relevance' => 0, 'match' => new Highlight\RegEx('/,/')), (object) array('className' => 'params', 'begin' => new Highlight\RegEx('/\\\\\\(/'), 'end' => new Highlight\RegEx('/\\\\\\)/'), 'keywords' => $CPP_KEYWORDS, 'relevance' => 0, 'contains' => array($C_LINE_COMMENT_MODE, $hljs->C_BLOCK_COMMENT_MODE, $STRINGS, $NUMBERS, $CPP_PRIMITIVE_TYPES, (object) array('begin' => new Highlight\RegEx('/\\\\\\(/'), 'end' => new Highlight\RegEx('/\\\\\\)/'), 'keywords' => $CPP_KEYWORDS, 'relevance' => 0, 'contains' => array('self', $C_LINE_COMMENT_MODE, $hljs->C_BLOCK_COMMENT_MODE, $STRINGS, $NUMBERS, $CPP_PRIMITIVE_TYPES)))), $CPP_PRIMITIVE_TYPES, $C_LINE_COMMENT_MODE, $hljs->C_BLOCK_COMMENT_MODE, $PREPROCESSOR));

    return (object) array('name' => 'C++', 'aliases' => array('cc', 'c++', 'h++', 'hpp', 'hh', 'hxx', 'cxx'), 'keywords' => $CPP_KEYWORDS, 'illegal' => '</', 'classNameAliases' => (object) array(), 'contains' => array()->concat($EXPRESSION_CONTEXT, $FUNCTION_DECLARATION, $FUNCTION_DISPATCH, $EXPRESSION_CONTAINS, array($PREPROCESSOR, (object) array('begin' => '\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\s*<(?!<)', 'end' => '>', 'keywords' => $CPP_KEYWORDS, 'contains' => array('self', $CPP_PRIMITIVE_TYPES)), (object) array('begin' => $hljs->IDENT_RE + '::', 'keywords' => $CPP_KEYWORDS), (object) array('match' => array(new Highlight\RegEx('/\\\\b\\(\\?\\:enum\\(\\?\\:\\\\s\\+\\(\\?\\:class\\|struct\\)\\)\\?\\|class\\|struct\\|union\\)/'), new Highlight\RegEx('/\\\\s\\+/'), new Highlight\RegEx('/\\\\w\\+/')), 'className' => (object) array()))));
}
$module->exports = $cpp;
